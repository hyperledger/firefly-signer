// Code generated by mockery v2.38.0. DO NOT EDIT.

package ethsignermocks

import (
	context "context"

	ethsigner "github.com/hyperledger/firefly-signer/pkg/ethsigner"
	ethtypes "github.com/hyperledger/firefly-signer/pkg/ethtypes"

	mock "github.com/stretchr/testify/mock"
)

// Wallet is an autogenerated mock type for the Wallet type
type Wallet struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Wallet) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccounts provides a mock function with given fields: ctx
func (_m *Wallet) GetAccounts(ctx context.Context) ([]*ethtypes.Address0xHex, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 []*ethtypes.Address0xHex
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ethtypes.Address0xHex, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ethtypes.Address0xHex); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ethtypes.Address0xHex)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Initialize provides a mock function with given fields: ctx
func (_m *Wallet) Initialize(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Initialize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx
func (_m *Wallet) Refresh(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Refresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Sign provides a mock function with given fields: ctx, txn, chainID
func (_m *Wallet) Sign(ctx context.Context, txn *ethsigner.Transaction, chainID int64) ([]byte, error) {
	ret := _m.Called(ctx, txn, chainID)

	if len(ret) == 0 {
		panic("no return value specified for Sign")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, int64) ([]byte, error)); ok {
		return rf(ctx, txn, chainID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ethsigner.Transaction, int64) []byte); ok {
		r0 = rf(ctx, txn, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ethsigner.Transaction, int64) error); ok {
		r1 = rf(ctx, txn, chainID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWallet creates a new instance of Wallet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWallet(t interface {
	mock.TestingT
	Cleanup(func())
}) *Wallet {
	mock := &Wallet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
